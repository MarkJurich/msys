<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<!--$Id: mingw-oldfaq.shtml,v 1.10 2003-02-04 05:40:11 natbobc Exp $-->
  <title>"The Old FAQ"</title>
  <meta name="description"
 content="Information about the Mingw Compiler.  
   Includes descriptive information and questions commonly brought up on the mailing list.">
  <meta name="keywords"
 content="mingw, mingw32, programming, C++, C, C/C++, libraries, 
   software, development tools, editors, IDEs, GNU">
  <style type="text/css"><!-- ol.alpha {list-style-type: upper-alpha} --></style>
  <style type="text/css"><!-- ol.romanum {list-style-type: lower-roman} --></style>
  <style type="text/css"><!-- ol {margin-top: 1em} --></style>
  <style type="text/css"><!-- ul {margin-top: 1em} --></style>
  <style type="text/css"><!-- ul {margin-bottom: 1em} --></style>
</head>
<body style="background-color: white; color: black;" link="#0000ee"
 vlink="#551a8b" alink="red">
<h1 align="center">"The Old FAQ"</h1>
<!-- two-column format: left sidebar and the body -->
<table border="0" cellspacing="6" cellpadding="8">
  <tbody>
    <tr>
      <td bgcolor="#eeeeee" valign="top" width="10%"><!--#include file="ssi/lsidebar.html"--> <br>
      </td>
<!-- 2nd column of two-column format: the body --> <td valign="top"><!-- ================================================================== --><!--                                                                    --><!--			  Main Body                                     --><!--                                                                    -->
      <table border="0" cellspacing="6" cellpadding="0">
        <tbody>
          <tr>
            <td valign="top" align="left">
            <h1><span style="color: rgb(255, 0, 0);">WARNING this page
is scheduled for removal.</span><span style="font-weight: bold;"></span></h1>
            <p>Please refer to the <a
 href="http://www.mingw.org/trial/htdocs/links.shtml"
 style="font-weight: normal;">Related Sites</a> page for information you
expected to find here, but appears to be missing.&nbsp; The following
are questions and answers from "The Old FAQ", whose content         
has yet to be assimilated into the consolidated FAQ or given a home    
elsewhere.  Most of the questions still remaining here don't fit in    
with the objectives of any currently-existing portion of the website...
so they are waiting to be incorporated into the upcoming <i>MinGW
User's Guide</i>.<br>
            </p>
            <a name="index"> </a>
            <ul>
              <a name="index"> <li><br>
              </li>
              </a><a href="#othercompilerdistributions">Other compiler
distributions</a> <li><a href="#help">Help</a></li>
              <li><a href="#debugging">Debugging</a></li>
              <li><a href="links.shtml">IDEs and editors</a></li>
              <li><a href="#morecompilingandbuildingissues">More
compiling and building issues</a></li>
              <li><a href="#compileroutput">Compiler output</a></li>
              <li><a href="#patches">Patches</a></li>
              <li><a href="#guisapplicationframeworksuserinterfaces">GUIs/application
frameworks/user interfaces</a></li>
              <li><a href="#libraries">Libraries</a></li>
              <li><a href="#otherprogrammingtools">Other programming
tools</a></li>
              <li><a href="#otherresources">Other resources</a></li>
            </ul>
            <hr> <a name="othercompilerdistributions"> </a>
            <h3><a name="othercompilerdistributions">Other compiler
distributions</a></h3>
            <a name="othercompilerdistributions"> </a>
            <p> <a name="othercompilerdistributions"> Other compiler
packages are available for Win32 systems.  These          include: </a></p>
            <a name="othercompilerdistributions"> </a>
            <ul>
              <a name="othercompilerdistributions"> <li> rsxnt, rsxntdj
from </li>
              </a><a
 href="http://www.mathematik.uni-bielefeld.de/%7Erainer/">
http://www.mathematik.uni-bielefeld.de/~rainer/</a> is used in
conjunction with Gnu compilers on various platforms such             as
djgpp and emx to create Win32 executables. <li> Watcom from <a
 href="http://www.openwatcom.org/"> http://www.openwatcom.org/</a> is a
collection of multi-platform C/C++ and             Fortran compilers
with integerated development environments.  Sybase             has
recently agreed to release the Watcom compiler under an Open Source    
License under the management of SciTech Software Inc.             Their
plans are to work with other Open Source development groups            
once development of the new Open Source version commences.            
Check their web site for the latest news on Watcom development. </li>
            </ul>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="help"> </a>
            <h3><a name="help">Help</a></h3>
            <a name="help"> </a>
            <ol>
              <li>
                <h4>Compiler, Win32 and C functions help files</h4>
                <p> The following are URLs of sources for compiler,
Win32, C++ or C function                documentation available freely
through the Internet. </p>
                <ul>
                  <li> GNU and C library documentation in WinHelp
format, <a href="http://mefriss1.swan.ac.uk/%7Ejfonseca/gnu-win32/">
http://mefriss1.swan.ac.uk/~jfonseca/gnu-win32/</a> <br>
Other useful programs and examples for mingw too. </li>
                  <li> C library documentation in HTML format, <a
 href="http://cs-alb-pc3.massey.ac.nz/software/gcc.exe">
http://cs-alb-pc3.massey.ac.nz/software/gcc.exe</a> <br>
Also contains tutorial on C programming and some example C/C++
programs along with a small gcc distribution. </li>
                  <li> Windows API Reference, <a
 href="http://www.borland.com/devsupport/borlandcpp/patches/BC52HLP1.ZIP">
http://www.borland.com/devsupport/borlandcpp/patches/BC52HLP1.ZIP</a> </li>
                  <li> Windows API Documation, <a
 href="ftp://ftp.cs.virginia.edu/pub/lcc-win32/win32hlp.exe">
ftp://ftp.cs.virginia.edu/pub/lcc-win32/win32hlp.exe</a> </li>
                </ul>
                <p> If you know of any other documentation, please
mention it                so it can be added to the list. </p>
              </li>
              <li style="font-weight: bold;">Tutorials<br>
                <span style="font-weight: normal;">Please refer to </span><a
 href="http://www.mingw.org/trial/htdocs/links.shtml"
 style="font-weight: normal;">Related Sites</a></li>
            </ol>
            <a name="help"> </a>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="debugging"> </a>
            <h3><a name="debugging">Debugging</a></h3>
            <a name="debugging"> </a>
            <ol>
              <a name="debugging"> <li>
                <h4>Write statements</h4>
                <p> The simplest method of debugging is to add write
statements to                the code in order to tell what's going on.
In C, <code>puts</code> and <code>printf</code> are useful.  In C++, <code>cout</code>
is helpful.  In Windows, the <code>MessageBox</code> is helpful as long
as you don't call it during a paint routine.  If                you do
anything in a Windows application that tries to repaint the screen
during a paint                call, you can get stuck in an infinite
loop. Some programmers find using <code>assert</code> statements a good
method to help debug. </p>
              </li>
              <li>
                <h4>Map files and crash addresses</h4>
                <p> If you can get the address of a program crash and
you have a map                file for your program, you can locate the
line or routine where the program crashed. </p>
                <p> Certain systems, such as Windows NT and some Windows
98 machines, have                a program named Dr. Watson available
which will supply information about                a program when it
crashes. Some commercial compilers also supply a program
with this functionality.  If you have one of these programs available on
your system, you can use the address of the crash supplied by it to    
help locate the problem.  If anyone knows of any freeware programs that
duplicate                this functionality or has source code to find
the address during a crash, please let me know. </p>
                <p> Here are three ways to create a map file.  Choose
the method                you like best.  In these examples, I've used
sample names                such as file.map and file.exe.  Change the
map, executable and object                files to ones more relevant to
your particular project. </p>
                <pre>   ld file.exe -Map file.map<br><br>   nm --extern-only --defined-only -v --print-file-name file.exe &gt; file.map<br><br>   g++ -Wl,-Map,file.map -o file file.o otherfile.o<br>            </pre>
                <p> On systems such as Windows NT, you can specify what
application is run                when a program crashes.  To do so,
edit the Debugger value for the
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\AeDebug 
registry key and change it to the program you want run after a crash.
Windows makes available the ID of the process to debug and
an event ID to signal when the debugger finishes calling
DebugActiveProcess. These can be passed via command line to the program 
listed as Debugger.  Setting the auto value for this registry key      
to 1 causes the program listed as Debugger to automatically run.       
Setting it to 0 brings up a crash dialog instead. </p>
              </li>
              <li>
                <h4>Dr. MinGW</h4>
                <p> Dr. MinGW is a just-in-time exception handler for
mingw. See </p>
              </li>
              </a><a
 href="http://mefriss1.swan.ac.uk/%7Ejfonseca/gnu-win32/software/drmingw/index.html">
http://mefriss1.swan.ac.uk/~jfonseca/gnu-win32/software/drmingw/index.html</a>
for a copy.                It will automatically install itself as the
default debugger in                the registry if run with the proper
options. If you do not                already have some debugger
installed on your system, you may                have to add
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\AeDebug 
to your registry by hand before successfully running the install
option. <li>
                <h4>Debugger</h4>
                <p> For more in depth debugging, you will most likely
need the help                of a debugger program.  Mingw includes gdb
(Gnu debugger) in its                distribution. </p>
              </li>
              <li>
                <h4>GUI debugger</h4>
                <p> Many people prefer a GUI front end to their
debugger. Mingw                currently does not supply this in its
distribution. This leaves                two options for GUI debuggers. 
Use one from another compiler distribution or use a GUI
front end to gdb.  Here are some links for both options. </p>
                <p> These are some GUI front ends to gdb: </p>
                <ul>
                  <li> Insight, <a
 href="http://sources.redhat.com/insight/">
http://sources.redhat.com/insight/</a> <br>
Requires cygwin. </li>
                  <li> Jessie, <a
 href="http://oss.sgi.com/projects/jessie/">
http://oss.sgi.com/projects/jessie/</a> <br>
Implemented largely in Java. </li>
                </ul>
                <p> Check the <a href="#othercompilerdistributions">Other
compiler distributions</a> section for other compilers with different
debuggers. </p>
                <ul>
                  <li> The lcc-win32 project is working on a GUI
debugger. The current                   version works only for C code.
Download a copy from <a href="http://www.cs.virginia.edu/%7Elcc-win32/">
http://www.cs.virginia.edu/~lcc-win32/</a> </li>
                </ul>
              </li>
            </ol>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="idesandeditors"> </a>
            <h3><a name="idesandeditors">IDEs and editors</a></h3>
            <a name="idesandeditors"> </a>
            <ol>
              <li>
                <h4>What IDEs are available?</h4>
              </li>
Please refer to <a href="http://www.mingw.org/trial/htdocs/links.shtml">Related
Sites</a>
            </ol>
            <ol>
              <a name="idesandeditors"> <li>
                <h4>What editors are available?</h4>
                <ul>
                  <li> PFE (Programmer's File Editor), <a
 href="http://www.lancs.ac.uk/people/cpaap/pfe/">
http://www.lancs.ac.uk/people/cpaap/pfe/</a> </li>
                  <li> Vim (Vi Improved), <a href="http://www.vim.org/">http://www.vim.org/</a> </li>
                  <li> JED, <a href="http://space.mit.edu/%7Edavis/jed/">
http://space.mit.edu/~davis/jed/</a> </li>
                  <li> Emacs, several versions are available.  Check the
 Gnu web site or your favorite search engine. </li>
                  <li> Scintilla and SciTE, <a
 href="http://www.scintilla.org/">http://www.scintilla.org/</a> <br>
Scintilla is an Open Source editing component and SciTE is a
text based editor which uses it. </li>
                </ul>
              </li>
              <li>
                <h4>Other reference sites</h4>
                <ul>
                  <li> Free Editors for C/C++ Programming with Windows
at <a href="http://www.blockdev.net/Community/Editors/">
http://www.blockdev.net/Community/Editors/</a> lists other editor and
IDE resources. </li>
                  <li> For those who prefer DOS editors, there are many
good options such as edwin and pedit.</li>
                </ul>
              </li>
              </a>
            </ol>
            <a name="idesandeditors"> </a>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="morecompilingandbuildingissues"> </a>
            <h3><a name="morecompilingandbuildingissues">More compiling
and building issues</a></h3>
            <a name="morecompilingandbuildingissues"> </a>
            <ol>
              <a name="morecompilingandbuildingissues"> <li>
                <h4>main or WinMain?</h4>
                <p> Windows programs use WinMain instead of main.
However, MinGW is set up so                that you can use either. </p>
              </li>
              <li>
                <h4>Why are my executable sizes large?</h4>
                <p> Some users on the MinGW mailing list have noticed
ending up with unusually large executable sizes.  This can happen
if you leave in debugging information.  To make your executables
smaller, try linking with the -s switch or use the strip program
on the final executable (not the object or library files).  Compiling
without the -g option is another alternative. </p>
              </li>
              <li>
                <h4>Linking to other compilers' libraries</h4>
                <p> Due to binary compatibility issues between different
compilers, you cannot                directly link in libraries or
object code from one compiler to another compiler such as
MinGW and expect it to work.  The reverse is true as well.  Even dlls
are not                completely portable across compilers.  To deal
with this issue, various                standards such as COM and CORBA
were created. </p>
                <p> If you want to use a library or objects from one
compiler with another,                the easiest way to do it is to
have the source (.c, .cpp, .rc, .def, etc.) and                to
compile and build that code with the desired compiler and its tools.
You can use the same dll with different compilers with varying degrees
of success.                You'll need either a .def file or to use
calls such as LoadLibrary/GetProcAddress to do so.  The
self-hosting version of MinGW provides better support of Visual C++    
binary compatibility.  You can use certain libraries built with Visual
C++ with this                version of MinGW without having to rebuild
them using MinGW and vice versa. </p>
              </li>
              <li>
                <h4>Linking libraries</h4>
                <p> If you place libraries before the object files that
reference them,                the linker will be unable to find them.
The linker works left-to-right,                single pass.  The easiest
way to avoid the problem is to place all libraries after
the object files.  It is also recommended that libraries to be linked  
with should not be repeated on the command line. While listing the
same library                more than once works with several linkers,
the MinGW linker currently has problems with this
situation and may leave needed routines out of the link when this is
done. </p>
                <p> Here's an example of a line that links in multiple
objects and libraries: </p>
                <pre>   gcc -o hello hello.o util.o pdcurses.a -ltstdll<br>            </pre>
                <p> The command links in the libraries pdcurses.a and
libtstdll.a to create                an executable hello.exe. </p>
              </li>
              <li>
                <h4>Linking to dlls</h4>
                <p> Although dlls are supposed to be fairly portable
across different Windows                compilers, accessing dlls
through a library file (.lib or .a) is not.  The library
file formats are specific to particular compilers and cannot be used   
portably with different compilers unless the compiler provides support 
for it. </p>
                <p> There are two ways to link to a dll. </p>
                <ul>
                  <li> Provide a library file to let the program know
what routines are                   in the dll and where to find them. </li>
                  <li> Use LoadLibrary/FreeLibrary and GetProcAddress. </li>
                </ul>
In order to use Microsoft or other compiler dlls, you can use any
of the following methods:
                <ul>
                  <li> Create def and library files.  If you have the
object files for the dll                   created using MinGW, you can
create a def file and a library file using                   the
following method.
                    <pre>   dlltool --output-def file.def --output-lib libfile.a [list of objects]<br>                  </pre>
Substitute your object file names for <code>[list of objects]</code>.
If you only have the dll file, see the <a
 href="#howtocreateadeffileforadll">How to create a def file for a dll</a>
section for alternative techniques.                   Once you have a
def file, you can create a library file (.a)                   in the
proper format for MinGW using dlltool.  For example:
                    <pre>   dlltool --def file.def --dllname file.dll --output-lib file.a<br>                  </pre>
                  </li>
                  <li> The self-hosting version of MinGW has additional
Microsoft compatible support                   and should allow you to
link directly with library files in Microsoft .lib
format. See the links in the <a href="#otherresources">Other resources</a>
section. </li>
                  <li> Use LoadLibrary/FreeLibrary and GetProcAddress.
With this method, no library                   file (.lib or .a) is
required. You can connect directly to the dll.  LoadLibrary
must be called before the dll can be accessed.  FreeLibrary should be
called before exiting the program.  GetProcAddress is used to access
specific functions                   in the dll by retrieving their
addresses.  You'll need to call GetProcAddress for each function
from the dll you want to work with.  Check a Win32 reference such as   
those found in the <a href="#help">Help</a> links for more information
on the use                   of these functions. </li>
                </ul>
                <p> (Note:  While C functions in dlls are generally
portable across compilers,                I'm told that this isn't
necessarily true for C++.  When writing your                own dlls,
you can mark C++ functions and data in dlls as extern "C" to
help bridge some of the C++ portability issues between compilers.  See
the MinGW mailing list archives for more portability concerns regarding
dlls.) </p>
              </li>
              <li>
                <h4>What are other useful compiler flags?</h4>
                <p> You can get help by using the <code>--help</code>
option. <br>
For example: </p>
                <pre>   gcc --help<br>            </pre>
You can display the compiler version using the <code>-dumpversion</code>
option. You can display the platform using the <code>-dumpmachine</code>
option. You can specify include files not in your path by using <code>-I</code>.<br>
For example:
                <pre>   gcc -c hello.c -I../pdcurses<br>            </pre>
You can specify a directory for library files indicated by the <code>-l</code>
option by using <code>-L</code>.             You can use <code>-g</code>
to add debug information for the debugger to work             properly.
You can use <code>-D</code> to specify a define. <br>
For example:
                <pre>   gcc -c hello.c -D__WINDOWS__<br>            </pre>
You can use <code>-v</code> to find out more about the executables
being invoked. <br>
For example:
                <pre>   gcc -v<br>            </pre>
              </li>
              </a>
            </ol>
            <a name="morecompilingandbuildingissues"> </a>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="compileroutput"> </a>
            <h3><a name="compileroutput">Compiler output</a></h3>
            <a name="compileroutput"> </a>
            <ol>
              <a name="compileroutput"> <li>
                <h4>Error redirection</h4>
                <p> MinGW displays compilation and linking errors to
stderr instead                   of stdout.  To easily view these
errors, you may need to redirect                   the output to stdout
or a file.  Some methods to do so include using                   one of
the following programs: </p>
                <ul>
                  <li> redir, <a
 href="ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/ports/redir.zip">
ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/ports/redir.zip</a> </li>
                  <li> errfix, <a
 href="http://www.snippets.org/snippets/home.php3">
http://www.snippets.org/snippets/home.php3</a> <br>
See the Errfix.C file </li>
                  <li> On Windows NT systems stderr can be redirected. <br>
For example:  gcc --help 2&gt;&amp;1|more </li>
                </ul>
              </li>
              <li>
                <h4>Keeping the dos box open</h4>
                <p> Some users have had trouble with the dos box closing
after building a program and haven't been able to see their errors.  The
MinGW mailing list came up with several suggestions on how to          
deal with this.  One suggestion from Franco Bez is as follows: </p>
                <p> By modifying a few Registry Keys - you can add a
context menu item <code>Run - stay open</code>, so you simply <em>right
click</em> on                   the Batch file and choose <code>Run -
stay open</code> and your batch runs and stays open. </p>
                <p> The following Registry files do this and a little
more: </p>
                <ul>
                  <li> context menu <code>DOS Box</code> for Folders and
files - opens a dos box                   in the folder </li>
                  <li> context menu <code>Notepad</code> for all files,
even those with                   missing/unknown extension - opens the
file in Notepad for editing </li>
                  <li> context menu <code>Run - stay open</code> for
bat, com and exe files </li>
                </ul>
                <p> Place the following lines in a file (such as
Win95_98.reg or WinNT.reg) and                simply merge the file for
your system to your registry by doubleclicking it.                The
example below is for Windows NT.  If you are using a Windows 95 or 98
system, change all the occurrences of <code>cmd</code> to <code>command.com</code>.</p>
                <pre>   REGEDIT4<br><br>   [HKEY_CLASSES_ROOT\*]<br><br>   [HKEY_CLASSES_ROOT\*\shell]<br><br>   [HKEY_CLASSES_ROOT\*\shell\dos_box]<br>   @="DOS Box"<br><br>   [HKEY_CLASSES_ROOT\*\shell\dos_box\command]<br>   @="cmd"<br><br>   [HKEY_CLASSES_ROOT\*\shell\open]<br>   @="Notepad"<br><br>   [HKEY_CLASSES_ROOT\*\shell\open\command]<br>   @="Notepad.exe %1"<br><br>   [HKEY_CLASSES_ROOT\Folder\shell]<br><br>   [HKEY_CLASSES_ROOT\Folder\shell\dos_box]<br>   @="DOS Box"<br><br>   [HKEY_CLASSES_ROOT\Folder\shell\dos_box\command]<br>   @="cmd /k cd %1"<br><br>   [HKEY_CLASSES_ROOT\batfile\shell]<br><br>   [HKEY_CLASSES_ROOT\batfile\shell\runstayopen]<br>   @="R&amp;un - Stay open"<br><br>   [HKEY_CLASSES_ROOT\batfile\shell\runstayopen\command]<br>   @="cmd /k %1"<br><br>   [HKEY_CLASSES_ROOT\comfile\shell]<br><br>   [HKEY_CLASSES_ROOT\comfile\shell\runstayopen]<br>   @="R&amp;un - Stay open"<br><br>   [HKEY_CLASSES_ROOT\comfile\shell\runstayopen\command]<br>   @="cmd /k %1"<br><br>   [HKEY_CLASSES_ROOT\exefile\shell]<br><br>   [HKEY_CLASSES_ROOT\exefile\shell\runstayopen]<br>   @="R&amp;un - Stay open"<br><br>   [HKEY_CLASSES_ROOT\exefile\shell\runstayopen\command]<br>   @="cmd /k %1"<br>            </pre>
              </li>
              </a>
            </ol>
            <a name="compileroutput"> </a>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="patches"> </a>
            <h3><a name="patches">Patches</a></h3>
            <a name="patches"> </a>
            <p> <a name="patches"> If you have changes to source code,
it may be easier to distribute          them as patches than to send the
entire code to someone or list the changes by hand. Patching
is an automated process of updating files using tools such as patch
and diff. </a></p>
            <a name="patches"> </a>
            <p> <a name="patches"> Patches can be created by comparing
two files with the diff program or          from various version control
systems such as RCS.  Several versions of diff          have been
ported to Windows and DOS.  See sites such as Virtually Un*x listed    
in the Other programming tools section.  There are also several
versions of          patch available for use in applying patches to
source code.  One site that          includes it is Mumit's site also
listed in the Other programming tools section. Detailed help
information on using diff and patch and the various options available  
for working with them is also available in WinHelp format from the
Virtually Un*x          site. </a></p>
            <a name="patches"> </a>
            <p> <a name="patches"> To create a patch, compare the two
versions of the file with diff.  Here's an          example: </a></p>
            <a name="patches"> </a>
            <pre><a name="patches">   diff --ignore-all-space old\file.cpp current\file.cpp &gt; patch.fil<br>      </a></pre>
            <a name="patches"> </a>
            <p> <a name="patches"> The example ignores whitespace and
compares the old version of file.cpp          in directory old with the
latest version in directory current.  The          output is redirected
to a file.  Most patches these days also include          the <code>-c</code>
or <code>-u</code> option which allows programmers          to figure
out what has changed in a file by viewing the context of the
lines around it.  Another common option is <code>-r</code> for working
with entire directories instead of single files.  The option <code>-p</code>
may also be useful.  It adds information on what C functions a change
appears in. </a></p>
            <a name="patches"> </a>
            <p> <a name="patches"> To patch a file, you'll need the
original source file (old version)          and the file with the
patches created by diff.  Here's an example of          how to call
patch: </a></p>
            <a name="patches"> </a>
            <pre><a name="patches">   patch -o file.cpp ..\old\file.cpp patch.fil<br>      </a></pre>
            <a name="patches"> </a>
            <p> <a name="patches"> The command patches file.cpp in the
old directory and outputs the updated          file to file.cpp
(specified by the <code>-o</code> option).  Another useful
switch for use with patch is <code>-p</code> which can affect the
naming/location of files and can be used when working with compared
directories. </a></p>
            <a name="patches"> </a>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="guisapplicationframeworksuserinterfaces"> </a>
            <h3><a name="guisapplicationframeworksuserinterfaces">GUIs/application
frameworks/user interfaces</a></h3>
            <a name="guisapplicationframeworksuserinterfaces"> </a>
            <ol>
              <a name="guisapplicationframeworksuserinterfaces"> <li>
                <h4>Can I use MFC or OWL?</h4>
                <p> MinGW provides access to the Win32 API.
Theoretically, if you                own the MFC source code you could
build MFC libraries for MinGW.                No one's tried this so
far. If anyone does successfully accomplish                it, please
say so and it will be added to this document. </p>
                <p> For OWL owners, there is a port with additional
features which                supports various compilers including the
gcc compiler line.  See </p>
              </li>
              </a><a href="http://www.owlnext.org/">http://www.owlnext.org/</a>
for details.  Thanks to Greg Chicares for supplying this information.
 <li>
                <h4>What GUIs/application frameworks/user interface
libraries are available?</h4>
                <p> There are a number of these available.  The
following are known                to have worked with MinGW.  There are
several other libraries                out there. </p>
                <ul>
                  <li> Curses, PDCurses, <a
 href="http://www.lightlink.com/hessling/">http://www.lightlink.com/hessling/</a> </li>
                  <li> Windows++, <a
 href="http://www.dilascia.com/wpp.htm">http://www.dilascia.com/wpp.htm</a> </li>
                  <li> wxWindows, <a href="http://wxwindows.org">http://wxwindows.org</a> </li>
                  <li> V, <a href="http://www.objectcentral.com/">http://www.objectcentral.com/</a> </li>
                  <li> fltk, <a href="http://www.fltk.org/">http://www.fltk.org/</a> </li>
                  <li> Fox, <a
 href="http://www.fox-toolkit.org/fox.html">
http://www.fox-toolkit.org/fox.html</a> </li>
                  <li> GTK+, <a href="http://www.gimp.org/win32/">
http://www.gimp.org/win32/</a> </li>
                  <li> QT (see MinGW mailing list for information on
what was done to                   get this library to compile) </li>
                </ul>
              </li>
            </ol>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="libraries"> </a>
            <h3><a name="libraries">Libraries</a></h3>
            <a name="libraries"> </a>
            <p> <a name="libraries"> If you've had luck with building
other programming libraries and would like          to see them added to
the list, please e-mail information on where          these libraries
can be found and what you needed to do to build them. </a></p>
            <a name="libraries"> </a>
            <p> <a name="libraries"> Here is a list of some of the
libraries and programs that          can be built with MinGW. </a></p>
            <a name="libraries"> </a>
            <ol>
              <a name="libraries"> <li>
                <h4>Graphics libraries</h4>
                <ul>
                  <li>
                    <h5>OpenGL</h5>
                    <ol>
                      <li> <i>Where to get it?</i>
                        <p> You can get access to OpenGL when you
install a framework like                            fltk or wxWindows.
You can also install it yourself and                            use it
directly. See the <a href="#tutorials">Tutorials</a> section
for more information on working with OpenGL on a Win32 platform. </p>
                        <p> If you wish to install it yourself, OpenGL
and glut headers                            are available from <a
 href="http://www.cim.pe.u-tokyo.ac.jp/%7Ekawachi/software/cygwin_glut-e.html">
http://www.cim.pe.u-tokyo.ac.jp/~kawachi/software/cygwin_glut-e.html</a> </p>
                        <p> Create a GL directory under your include
directory (for example: <code>i386-mingw32/include/GL</code>).</p>
                        <p> You will need to move the <code>gl*.h</code>
files to this directory.  If you                            do not have <code>glut32.dll</code>
installed on your system, move it to your
Windows system directory. </p>
                        <p> To get a copy of the <code>glaux.h</code>
header, you can download it from <a
 href="http://people.montana.com/%7Ebowman/Software/ming.htm">
http://people.montana.com/~bowman/Software/ming.htm</a> </p>
                      </li>
                      <li> <i>How to compile OpenGL applications</i>
                        <p> There are some sample OpenGL programs
available from <a
 href="http://trant.sgi.com/opengl/examples/win32_tutorial/win32_tutorial.html">
http://trant.sgi.com/opengl/examples/win32_tutorial/win32_tutorial.html</a> <br>
While they don't include a make file, you can compile them just
as you would any other programs.  To link, don't forget the flags: <br>
                        <code>-mwindows -lglut -lglu32 -lopengl32</code> </p>
                        <p> For the examples included at <a
 href="http://www.cim.pe.u-tokyo.ac.jp/%7Ekawachi/software/cygwin_glut-e.html">
http://www.cim.pe.u-tokyo.ac.jp/~kawachi/software/cygwin_glut-e.html</a>,
link with the following flags: <br>
                        <code>-mwindows -lglut32 -lglu32 -lopengl32</code> </p>
                      </li>
                    </ol>
                  </li>
                  <li>
                    <h5>DirectX</h5>
                    <p> The latest version of DirectX for gcc is
available from <a
 href="http://mywebpage.netscape.com/PtrPck/directx.htm">
http://mywebpage.netscape.com/PtrPck/directx.htm</a> </p>
                    <p> An alternative version of DirectX is available
from <a href="http://people.montana.com/%7Ebowman/Software/ming.htm">
http://people.montana.com/~bowman/Software/ming.htm</a>.
If you're using MinGW version 2.95 or later, you only need
to do step 2 and add only the files that are not already in your
current MinGW distribution.  Many of the OpenGL and DirectX libraries
and includes have already been added to 2.95 and later distributions and
overwriting them can cause problems. </p>
                    <p> There are some compatibility issues for Windows
NT 4.  It does                      not provide full DirectX support for
the latest versions of DirectX.  See                      the MinGW
mailing list for more information. </p>
                    <p> For installation tips and getting started, see <a
 href="http://nrmassey.future.easyspace.com/Dx">
http://nrmassey.future.easyspace.com/Dx</a> </p>
                  </li>
                  <li>
                    <h5>libpng and libjpeg</h5>
                    <p> Information on building and using these
libraries with                      MinGW is available from <a
 href="http://sourceforge.net/projects/mingwrep/">
http://sourceforge.net/projects/mingwrep/</a> </p>
                  </li>
                  <li>
                    <h5>Mesa</h5>
                    <p> See <a href="http://mesa3d.sourceforge.net/">
http://mesa3d.sourceforge.net/</a> for more information. </p>
                  </li>
                  <li>
                    <h5>Simple DirectMedia Layer, libu and other
multimedia libraries</h5>
                    <p> <a href="http://www.libsdl.org/index.php">
http://www.libsdl.org/index.php</a> <br>
Simple DirectMedia Layer (SDL), cross-platform multimedia library. </p>
                    <p> <a
 href="http://www.rhrk.uni-kl.de/%7Eklaux/libu.html">
http://www.rhrk.uni-kl.de/~klaux/libu.html</a> <br>
Libu C++ toolkit for SDL.                      Also has links to
cross-compiled versions of Freetype, libpng and zlib. </p>
                  </li>
                </ul>
              </li>
              <li>
                <h4>Database libraries</h4>
                <ul>
                  <li>
                    <h5>Xbase</h5>
                    <p> <a href="http://linux.techass.com/projects/xdb/">
http://linux.techass.com/projects/xdb/</a> <br>
Dbase/Clipper compatible, cross-platform database library.
Successfully compiled with file locking off under MinGW. </p>
                  </li>
                  <li>
                    <h5>MetaKit</h5>
                    <p> <a href="http://www.equi4.com/metakit/">
http://www.equi4.com/metakit/</a> <br>
Cross platform, C++ database library. </p>
                  </li>
                  <li>
                    <h5>libodbc++</h5>
                    <p> <a href="http://www.orcane.net/freeodbc++/">
http://www.orcane.net/freeodbc++/</a> <br>
C++ class library, similar to JDBC, for ODBC access.
Compiled and built successfully with MinGW.  For now, see the
MinGW mailing list for some of the changes that were needed.
See also, ODBC access below since ODBC is required to use this library. </p>
                  </li>
                  <li>
                    <h5>Oracle access</h5>
                    <p> Oracle can be accessed using Oracle's pro*c and
sqllib80.dll (or sqllib18.dll for those with older versions of pro*c).  
There's an example article on how to access Oracle from unsupported    
compilers at <a href="http://technet.oracle.com">http://technet.oracle.com</a>.
Oracle's OCI interface also works in some cases using oci.dll or
ociw32.dll. If there's enough interest, I'll add source code for doing
this to the FAQ as well. </p>
                  </li>
                  <li>
                    <h5>ODBC access</h5>
                    <p> An ODBC manager (such as ODBC Data Sources
program accessible via the                      Control Panel) is
necessary to run ODBC programs.  If anyone has any
URLs for where to get an ODBC manager, please let me know.
Some possibilities if you don't already have one on your system
are to check the following: </p>
                    <ul>
                      <li> <a href="http://www.microsoft.com/data/odbc/">
http://www.microsoft.com/data/odbc/</a> </li>
                      <li> <a
 href="http://users.ids.net/%7Ebjepson/freeODBC/index.html">
http://users.ids.net/~bjepson/freeODBC/index.html</a> </li>
                      <li> <a href="http://www.bulletproof.com/odbc/">http://www.bulletproof.com/odbc/</a> <br>
Danny Smith recommended this link for ODBC 3.0 driver manager
and Access, SQL Server, DBase, Oracle, FoxPro and Paradox drivers. </li>
                    </ul>
                    <p> I'd be interested to hear if anyone has any luck
with these. </p>
                  </li>
                </ul>
              </li>
              <li>
                <h4>Other libraries</h4>
                <ul>
                  <li>
                    <h5>GNU gettext</h5>
                    <p> <a
 href="http://home.a-city.de/franco.bez/gettext/gettext_win32_en.html">
http://home.a-city.de/franco.bez/gettext/gettext_win32_en.html</a> <br>
Library/Tool used to help write internationalized and localized
programs. </p>
                  </li>
                  <li>
                    <h5>GNU readline</h5>
                    <p> <a
 href="http://sourceforge.net/project/showfiles.php?group_id=7382&amp;release_id=45655">
http://sourceforge.net/project/showfiles.php?group_id=7382&amp;release_id=45655</a> <br>
Gnu library for command line editing. </p>
                  </li>
                  <li>
                    <h5>zlib</h5>
                    <p> <a
 href="http://sourceforge.net/project/showfiles.php?group_id=7382&amp;release_id=31429">
http://sourceforge.net/project/showfiles.php?group_id=7382&amp;release_id=31429</a> <br>
Compression library.  Includes makefile for MinGW. </p>
                  </li>
                </ul>
              </li>
              <li>
                <h4>Other programs</h4>
                <ul>
                  <li>
                    <h5>Jam</h5>
                    <p> <a href="http://www.perforce.com/jam/jam.html">
http://www.perforce.com/jam/jam.html</a> <br>
Used to build executables. </p>
                  </li>
                  <li>
                    <h5>Midnight Commander</h5>
                    <p> <a
 href="http://home.a-city.de/franco.bez/mc/mc.html">
http://home.a-city.de/franco.bez/mc/mc.html</a> <br>
File manager/shell. </p>
                  </li>
                  <li>
                    <h5>Perl</h5>
                    <p> Programmers have reported some success in
compiling Perl 5.005_63.  Source for Perl is available from <a
 href="http://www.cpan.org/src/index.html">http://www.cpan.org/src/index.html</a> <br>
See the patch for MinGW at <a
 href="http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1999-12/msg00396.html">
http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/1999-12/msg00396.html</a> <br>
Thanks to Brent Williams for the information regarding building Perl
with MinGW. </p>
                  </li>
                </ul>
              </li>
              </a>
            </ol>
            <a name="libraries"> </a>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="otherprogrammingtools"> </a>
            <h3><a name="otherprogrammingtools">Other programming tools</a></h3>
            <a name="otherprogrammingtools"> </a>
            <p> <a name="otherprogrammingtools"> I have links to various
tools throughout the FAQ such as          in the Make, IDEs and editors,
Debugging and Other resources links, but here are some that
weren't specifically mentioned elsewhere. </a></p>
            <a name="otherprogrammingtools"> </a>
            <ol>
              <a name="otherprogrammingtools"> <li> Unix style tools
 <p> Many users have found Win32 or DOS versions of Unix programming    
tools very helpful.  Here are some places to find ports of well-known  
Unix tools. </p>
                <ul>
                  <li> Less, <a
 href="http://www.greenwoodsoftware.com/less/">http://www.greenwoodsoftware.com/less/</a> <br>
File filter for viewing files quickly.  Similar to DOS more program. </li>
                  <li> New Technology Shell (NTsh), <a
 href="http://wwwcip.informatik.uni-erlangen.de/user/mnwaitz/zips/ntsh-src.zip">
http://wwwcip.informatik.uni-erlangen.de/user/mnwaitz/zips/ntsh-src.zip</a> </li>
                  <li> ISpell, <a
 href="http://fmg-www.cs.ucla.edu/geoff/ispell.html">
http://fmg-www.cs.ucla.edu/geoff/ispell.html</a> <br>
Spell checker. </li>
                  <li> Ghostview, Ghostscript, <a
 href="http://www.cs.wisc.edu/%7Eghost/index.htm">
http://www.cs.wisc.edu/~ghost/index.htm</a> <br>
Postscript viewer. </li>
                  <li> Ron's Utilities, <a
 href="http://www.mossbayeng.com/%7Eron/vim/builds.html">
http://www.mossbayeng.com/~ron/vim/builds.html</a> <br>
Ports and patches for several GNU utilities to MinGW. </li>
                </ul>
              </li>
              <li> Other tools
                <p> For those who prefer working with tools other than
those found in Unix                environments, here are some sites to
check. If anyone else has favorite                programming tools to
add, feel free to suggest them. </p>
                <ul>
                  <li> DOS utilities, <a
 href="http://www.freedos.org/freedos/software/">
http://www.freedos.org/freedos/software/</a> <br>
If you want utilities similar to standard MS DOS ones, check this
site. It even includes a deltree version that works on Windows NT. All 
tools here are compiled for DOS 16 bit systems. Source is included
with most. </li>
                </ul>
              </li>
              </a>
            </ol>
            <a name="otherprogrammingtools"> </a>
            <p><a href="#index">Back to index</a></p>
            <hr> <a name="otherresources"> </a>
            <h3><a name="otherresources">Other resources</a></h3>
            <a name="otherresources"> </a>
            <p> <a name="otherresources"> If anyone has any other MinGW
pages they've put together that they'd like to add,          they can be
placed here. </a></p>
            <a name="otherresources"> </a>
            <ul>
              <a name="otherresources"> <li> Self-hosting version of
MinGW, </li>
              </a><a
 href="ftp://ftp.franken.de/pub/win32/develop/gnuwin32/mingw32/porters/Mikey/">
ftp://ftp.franken.de/pub/win32/develop/gnuwin32/mingw32/porters/Mikey/</a> <br>
Emulates VC++ and GNU development environments for MinGW. <br>
I personally recommend use of the latest versions of PDCurses (2.4) and
less (346), if             you've downloaded earlier ones.  See the
Libraries and Other programming tools sections for             links to
the latest versions. <li> Miscellaneous MinGW utilities and examples, <a
 href="ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/misc/">
ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/misc/</a> <br>
Includes COM, DLL and LoadLibrary examples, redir program, patch
program plus more. </li>
              <li> Paul Sokolovsky's Development Page, <a
 href="http://www.is.lg.ua/%7Epaul/devel/">http://www.is.lg.ua/~paul/devel/</a> <br>
Various ports of libraries, alternative binutils and some tutorials on
dlls. </li>
              <li> Fredos Homepage, <a
 href="http://penguin.at0.net/%7Efredo/">http://penguin.at0.net/~fredo/</a> <br>
More MinGW related ports. </li>
              <li> The Code Foundry, <a
 href="http://www.geocities.com/SiliconValley/Station/1177/foundry.html">
http://www.geocities.com/SiliconValley/Station/1177/foundry.html</a> <br>
Win32 code including a conio library.  Other useful information on
Win32 programming also available at this site. </li>
              <li> Command line globbing, <a
 href="http://sources.redhat.com/ml/cygwin/1999-11/msg00052.html">
http://sources.redhat.com/ml/cygwin/1999-11/msg00052.html</a> <br>
Bruce E. Wampler recommended this information on globbing for MinGW. </li>
              <li> UTF-8 support for windres, <a
 href="http://www.egroups.com/group/mingw32/1511.html">
http://www.egroups.com/group/mingw32/1511.html</a> </li>
              <li> Vijay Mukhi's Technology Cornucopia, <a
 href="http://www.vijaymukhi.com/vmis/">http://www.vijaymukhi.com/vmis/</a> <br>
Socket, COM, OLE and other programming examples. </li>
              <li> The Code Project, <a
 href="http://www.codeproject.com/">http://www.codeproject.com/</a> <br>
Lots of code samples and some tutorials.  Unfortunately, the emphasis
here is mainly             MFC and Visual C++, but there is some Win32
code if you look for it and the site             maintainers have said
they'd welcome any type of programming related submissions. </li>
            </ul>
            <p><a href="#index">Back to index</a></p>
            </td>
          </tr>
        </tbody>
      </table>
<!-- Close page table --> </td>
    </tr>
  </tbody>
</table>
<!--#include file="ssi/bottombar.html"--><!--#include file="ssi/footer.html"-->
<hr>
<address> <br>
Last revised $Date: 2003-02-04 05:40:11 $ </address>
</body>
</html>
