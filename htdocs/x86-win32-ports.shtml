<!-- $Id: x86-win32-ports.shtml,v 1.8 2002-06-02 05:48:10 infidel Exp $ -->

<html>
<head>
 <title>Various x86-win32 GCC ports</title> 
</head>
<body bgcolor="white" text="black" link="#0000EE" vlink="#551A8B" alink="red">

<h1 align="center">Various x86-win32 GCC ports</h1>

<!-- two-column format: left sidebar and the body -->
<table border="0" cellspacing="6" cellpadding="8">
<tr>
<td bgcolor="#eeeeee" valign="top" width="10%">

<!--#include file="ssi/lsidebar.html"-->

</td>
<!-- 2nd column of two-column format: the body -->
<td valign="top">

<!-- ================================================================== -->
<!--                                                                    -->
<!--			  Main Body (top)                               -->
<!--                                                                    -->

<table border="0" cellspacing="6" cellpadding="0">
<tr>
<td valign="top" align="left">

<p>
<em>EGCS</em> was an experimental step in the 
development of GCC, the GNU C compiler. Consult the 
<a href="http://gcc.gnu.org/">gcc/egcs web site</a> for more information.
As of April, 1999 FSF GCC project has merged with EGCS and the result 
is <a href="http://gcc.gnu.org/gcc-2.95/gcc-2.95.html">gcc-2.95 
release</a> on July 31, 1999. The project has been renamed <b>GNU 
Compiler Collection</b> or <b>GCC</b>. The upshot of all this is 
that what was to be <em>egcs-1.2</em> essentially became <em>gcc-2.95</em>.</p>

<p>
The terms Cygwin, Mingw32, UWIN etc refer to various x86-win32 GCC
subtargets; subtargets in the sense they share almost all of the backend, 
and use the same executable format and underlying windows32 operating 
system, except that the runtime environment is radically different. You 
can even build one copy of GCC that can, given the right specs file,
proper target includes and libraries and suitable command line options, 
build executables to run under any of these various runtime environments 
(eg., see my <a href="http://www.xraylith.wisc.edu/~khan/software/gnu-win32/mno-cygwin-howto.txt">-mno-cygwin howto</a> for some 
notes on creating Mingw32 executables/DLLs using Cygwin development 
environment).</p>

<p>
So, how do they differ?</p>

<dl>
<dt><strong>Cygwin</strong></dt>
<dd>
   Uses Cygnus's cygwin.dll, a POSIX emulation layer. The Beta 
   20.1 distribution contains a all the development tools as well as user
   tools you might need. This gets you a almost complete POSIX runtime
   library, and you can of course use the windows32 api as well. Uses
   newlib (used by lots of embedded systems) for the C library, and I'm
   not very fond of the math routines in there. 
   <br />
   For general information, see:
     <a href="http://sources.redhat.com/cygwin/">
     &lt;URL:http://sources.redhat.com/cygwin/&gt;</a>
   <br />
   For gcc toolchain, see:
     <a href="http://www.xraylith.wisc.edu/~khan/software/gnu-win32/gcc.html">
     &lt;URL:http://www.xraylith.wisc.edu/~khan/software/gnu-win32/gcc.html&gt;
     </a>
   <br />
   For older egcs toolchain, see:
     <a href="http://www.xraylith.wisc.edu/~khan/software/gnu-win32/egcs.html">
     &lt;URL:http://www.xraylith.wisc.edu/~khan/software/gnu-win32/egcs.html&gt;
     </a>
   <br />
   The free version of Cygwin
   runtime is distributed under the GNU Public License (GPL) and that
   means all code that uses Cygwin DLL also must be distributed under the
   GPL. You can of course purchase a commercial license from Cygnus
   Solutions that may not have this "restriction". However, Cygnus has
   recently clarified the licensing issues, and you should consult
   Cygwin home page (URL above) for updates.
</dd>
<dt><strong>Mingw32</strong></dt>
<dd>
   The "Minimalist" Gnu-Win32 project started by Colin Peters. 
   This uses Microsoft's runtime (either CRTDLL.DLL or MSVCRT.DLL) for 
   all services, and you get no more and no less than what Microsoft 
   provides -- mostly ANSI with some POSIX thrown in there. Code targeted 
   for this is typically runs the fastest, but of course you lose the
   POSIX stuff and porting ``Unix-type'' code is not necessarily trivial.
   <br />
   For general information, see Colin Peters' <br />
     <a href="http://webclub.kcom.ne.jp/ma/colinp/gcc.html">
     GCC for Win32 
     &lt;URL:http://webclub.kcom.ne.jp/ma/gcc.html&gt;</a>
   <br />
   For gcc toolchain, see:
     <a href="http://www.xraylith.wisc.edu/~khan/software/gnu-win32/gcc.html">
     &lt;URL:http://www.xraylith.wisc.edu/~khan/software/gnu-win32/gcc.html&gt;
     </a>
   <br />
   For older egcs toolchain, see:
     <a href="http://www.xraylith.wisc.edu/~khan/software/gnu-win32/egcs.html">
     &lt;URL:http://www.xraylith.wisc.edu/~khan/software/gnu-win32/egcs.html&gt;
     </a>
   <br />
   There is absolutely no licensing issues when using the Mingw32 toolset.
   The Mingw runtime is in the public domain, and you get the license to
   use CRTDLL (Microsoft C runtime) when you purchase a copy of the
   Microsoft Win9x/NT operating system. You can also use the MSVC add-on
   to create executables that depend on MSVCRT, which is available on just
   about all the Win9x/NT machines available today.
   <br />
</dd>
<dt><strong>AT&amp;T UWIN</strong></dt>
<dd>
   Another POSIX emulation layer developed by David Korn (of
   the Korn shell fame). Still in development, but works reasonably well
   under NT/NTFS (but somewhat unstable under W95/FAT). Uses Microsoft's
   compilers for development. Very similar, at least in principle, to 
   Cygwin.
   <br />
   For general information, see:
     <a href="http://www.research.att.com/sw/tools/uwin/">
     &lt;URL:http://www.research.att.com/sw/tools/uwin/&gt;</a>
   <br />
   For gcc toolchain, see:
     <a href="http://www.xraylith.wisc.edu/~khan/software/gnu-win32/gcc.html">
     &lt;URL:http://www.xraylith.wisc.edu/~khan/software/gnu-win32/gcc.html&gt;
     </a>
   <br />
   For older egcs toolchain, see:
     <a href="http://www.xraylith.wisc.edu/~khan/software/gnu-win32/egcs.html">
     &lt;URL:http://www.xraylith.wisc.edu/~khan/software/gnu-win32/egcs.html&gt;
     </a>
   <br />
   You need to install UWIN base package first before you can use 
   executables/DLLs produced by the GNU compilers. To be able to use
   GNU compilers on UWIN, you also need the UWIN development package.
   <br />
</dd>
<dt><strong>Others ...</strong></dt>
<dd>
   And, don't forget <a href="http://www.delorie.com/djgpp/">DJGPP</a> (DOS
   only, not windows32), <A HREF="http://www.mathematik.uni-bielefeld.de/~rainer/">RSXNTDJ, RSXNT</a>, ...
</dd>
</dl>
<p>
I'm sure I've missed a few and ignored a few others, and hopefully someone 
else fill those in.</p>

<p></p>
<!-- <hr noshade="noshade" size="1" /> -->

</td></tr></table>


<!-- Close page table -->
</td></tr></table>

<!--#include file="ssi/bottombar.html"-->
<!--#include file="ssi/footer.html"-->

<address>
<br />Last revised $Date: 2002-06-02 05:48:10 $
</address>

</body>
</html>

