# Makefile for man
# Source: Makefile.in -- processed by configure, to create Makefile.
#
# Copyright (C) 2005, Keith D. Marshall <keithmarshall@users.sourceforge.net>
#
# (Based on an unaccredited original implementation, believed to be the
#  work of John W. Eaton and/or Andries E. Brouwer).
#
# This file is part of the man package.
#
# man is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2, or (at your option) any later version.
#
# man is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with man; see the file COPYING.  If not, write to the Free Software
# Foundation, 51 Franklin St - Fifth Floor, Boston, MA 02110-1301, USA.

# To allow building in a separate build directory,
# (when the "make" program in use supports the VPATH capability),
# set up the srcdir mapping to VPATH.

srcdir = @srcdir@
VPATH = ${srcdir}

LN_S = @LN_S@

ZIPCMD = gzip
ZIPEXT = .gz

# Allow "configure" to choose if message catalogues will be built,
# and subsequently installed.

# (Disabled at present; uncomment to activate)...
# make_messages = @make_messages@
# install_messages = @make_install_messages@

all:	Makefile $(config_sed) tools source manhtml manpages $(make_messages)
	@echo; echo 'You can now do "make install"'

.PHONY: FORCE
FORCE:

# On a machine with time before distribution time
# it may be necessary to touch all distributed files

Makefile: Makefile.in configure
	@echo "Please run configure first"
	exit 1

config.sed: configure
	@echo "Please run configure first"
	exit 1

src/Makefile: $(config_sed) src/Makefile.in
	cd src; sed -f ../config.sed Makefile.in > Makefile

man2html/Makefile: $(config_sed) man2html/Makefile.in
	cd man2html; sed -f ../config.sed Makefile.in > Makefile

man/Makefile: $(config_sed) man/Makefile.in
	cd man; sed -f ../config.sed Makefile.in > Makefile

msgs/Makefile: $(config_sed) msgs/Makefile.in
	cd msgs; sed -f ../config.sed Makefile.in > Makefile

makefiles: src/Makefile man2html/Makefile man/Makefile msgs/Makefile

tools:	tools/Makefile FORCE
	cd tools; $(MAKE)

source:	src/Makefile FORCE
	cd src; $(MAKE)

manhtml: man2html/Makefile FORCE
	cd man2html; $(MAKE)

manpages: man/Makefile FORCE
	cd man; $(MAKE) subdirs

messages: gencat/gencat msgs/Makefile FORCE
	cd msgs; $(MAKE)

gencat/gencat:
	cd gencat; $(MAKE)

install: install-core $(install_messages) install-done

install-core: src/Makefile man/Makefile man2html/Makefile
	cd src; $(MAKE) install
	cd man2html; $(MAKE) install
	cd man; $(MAKE) installsubdirs

install-messages: msgs/Makefile
	cd msgs; $(MAKE) install

install-done:
	@echo; echo 'Done.'
	@echo 'If you would like to enable a www browser for man pages.'
	@echo '"cd man2html", read README, and perhaps "make install-scripts".'
#	@echo; echo 'Done. In case you want to mount /usr read-only, please'
#	@echo 'install a symlink /usr/man/whatis -> /var/catman/whatis,'
#	@echo '(or to whatever cat page location is appropriate).'

CLEANDIRS = src tools man2html man msgs gencat
DISTCLEANFILES =  Makefile auto* *.orig *.rej config.h config.[cls]*
CLEANFILES = core *~ *.stackdump

clean: src/Makefile man/Makefile msgs/Makefile man2html/Makefile
	for dir in $(CLEANDIRS); \
	  do (cd $$dir; $(MAKE) $@); \
	  done
	rm -f $(CLEANFILES)

spotless distclean realclean:
	for dir in $(CLEANDIRS); \
	  do (cd $$dir; $(MAKE) $@); \
	  done
	rm -rf $(CLEANFILES) $(DISTCLEANFILES)

# Distribution packaging and verification rules

distdir = @PACKAGE_NAME@-@PACKAGE_VERSION@
DISTNAME = ${distdir}`test -n "$(BUILD)" && echo -`$(BUILD)
DISTDIRS = src src/win32 man man/?? tools msgs catopen man2html man2html/scripts/cgi*/man gencat
DISTCLEANDIRS = $(CLEANDIRS) src/win32

.PHONY: dist distdir distcheck distpackage
dist: distdir distpackage
	rm -rf ${distdir}

distdir:
	rm -rf ${distdir}; mkdir ${distdir}
	srcdir=`cd ${srcdir}; pwd`; manifest=`cd ${srcdir}; echo $(DISTDIRS)`; \
	  cd ${distdir}; $$srcdir/mkinstalldirs $$manifest
	for file in `cd ${srcdir}; echo *`; \
	  do if test -f ${srcdir}/$$file; then \
	    echo $(LN_S) ${srcdir}/$$file ${distdir}/$$file; \
	    $(LN_S) ${srcdir}/$$file ${distdir}/$$file; \
	    fi; \
	  done
	for dir in `cd ${distdir}; echo $(DISTDIRS)`; \
	  do for file in `cd ${srcdir}/$$dir; echo *`; \
	    do if test -f ${srcdir}/$$dir/$$file; then \
	      echo $(LN_S) ${srcdir}/$$dir/$$file ${distdir}/$$dir/$$file; \
	      $(LN_S) ${srcdir}/$$dir/$$file ${distdir}/$$dir/$$file; \
	      fi; \
	    done; \
	  done
	for dir in $(DISTCLEANDIRS); \
	  do $(LN_S) ./$$dir/Makefile ${distdir}/$$dir/Makefile; \
	  done
	$(LN_S) ./Makefile ${distdir}/Makefile
	cd ${distdir}; $(MAKE) srcdir=. top_srcdir=`pwd` distclean

distpackage: distdir
	tar chf - ${distdir} | $(ZIPCMD) > $(DISTNAME).tar$(ZIPEXT)

# $RCSfile: Makefile.in,v $: end of file -- vim: ft=make
