# mingwPORT.getopts
# Required.  Establish optional behaviour set from command line.

OPTIONS="help info version"
TOGGLES="cleanup"

DEFAULT="--cleanup"

for argv in ${DEFAULT} ${MINGWPORT} "$@"
do
  case ${argv} in

    # Option arguments...
    #
    -*)
      # Attempt to identify a match to a defined option name,
      # treating all as GNU style long form options, and allowing
      # for abbreviations, but rejecting ambiguities.
      #
      arg=${argv} match=""
      case ${arg} in --*) ;; -*) arg=-${arg} ;; esac
      for opt in ${OPTIONS} ${TOGGLES}
      do
	case --${opt} in ${arg}*) match=${match}--${opt} ;; esac
      done
      for opt in ${TOGGLES}
      do
	case --no-${opt} in ${arg}*) match=${match}--no-${opt} ;; esac
      done

      case ${match} in

	--help | --info | --version) . ${mingwPORT}.help ;;

	--cleanup)     CLEANUP_ON_EXIT=". '${mingwPORT}.cleanup'" ;;
	--no-cleanup)  CLEANUP_ON_EXIT=": '${mingwPORT}.cleanup'" ;;

	--*) die getopts "${MSG_EAMBIG} ${argv}" ;;
	*)   die getopts "${MSG_ENOOPT} ${argv}" ;;

      esac ;;

    # Assignment arguments...
    #
    *=*)
      # Simply add these to the environment,
      # to be passed to the build process.
      #
      eval export \"${argv}\" ;;

    # Anything else is invalid...
    #
    *) die getopts "${argv}: ${MSG_EARGV}" ;;

  esac
done

# $RCSfile: mingwPORT.getopts,v $: end of file: vim: ft=sh
