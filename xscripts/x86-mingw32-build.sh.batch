# x86-mingw32-build.sh.batch -- vim: filetype=sh
# $Id: x86-mingw32-build.sh.batch,v 1.1 2006-11-05 23:26:40 keithmarshall Exp $
#
# Unattended mode setup for x86-mingw32-build.sh cross compiler build.
#
# Copyright (C) 2006, MinGW Project
# Written by Keith Marshall <keithmarshall@users.sourceforge.net>
#
# This file is a component of the x86-mingw32-build script; it is not
# intended for stand alone use.
# 
# x86-mingw32-build is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any later
# version.
# 
# x86-mingw32-build is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for further details.
# 
# You should have received a copy of the GNU General Public License along
# with x86-mingw32-build; see the file COPYING.  If not, write to the Free
# Software Foundation, 51 Franklin St - Fifth Floor, Boston, MA 02110-1301,
# USA.

BUILD_METHOD=unattended
. $script.mirrors

if isyes $USE_LATEST_VERSIONS
then
  if isyes $ALLOW_DOWNLOADS
  then
    option GCC_VERSION "`enumerate $PACKAGE_DIR/gcc-core- -src.tar.gz`"
    option BINUTILS_VERSION "`enumerate $PACKAGE_DIR/binutils- -src.tar.gz`"
    option RUNTIME_VERSION "`enumerate $PACKAGE_DIR/mingw-runtime- -src.tar.gz`"
    option W32API_VERSION "`enumerate $PACKAGE_DIR/w32api- -src.tar.gz`"
  else
    GCC_VERSION=`enumerate $PACKAGE_DIR/gcc-core- -src.tar.gz`
    BINUTILS_VERSION=`enumerate $PACKAGE_DIR/binutils- -src.tar.gz`
    RUNTIME_VERSION=`enumerate $PACKAGE_DIR/mingw-runtime- -src.tar.gz`
    W32API_VERSION=`enumerate $PACKAGE_DIR/w32api- -src.tar.gz`
  fi
  GCC_VERSION=`newest $GCC_VERSION`
  BINUTILS_VERSION=`newest $BINUTILS_VERSION`
  RUNTIME_VERSION=`newest $RUNTIME_VERSION`
  W32API_VERSION=`newest $W32API_VERSION`
fi

option GLOBAL_BASE_OPTIONS "$GLOBAL_USER_OPTIONS"

case $BUILD_COMPONENTS in *gcc*)
  test -n "$GCC_VERSION" && \
    option DOWNLOAD gcc-core-$GCC_VERSION-src.tar.gz
  option GCC_BASE_OPTIONS "$GCC_USER_OPTIONS"
  for PACKAGE in $GCC_LANGUAGE_OPTIONS
  do
    FILE=$PACKAGE
    case $PACKAGE in 'c++') FILE='g++' ;; f77) FILE=g77 ;; esac
    if isyes $ALLOW_DOWNLOADS || \
    test -f $PACKAGE_DIR/gcc-$FILE-$GCC_VERSION-src.tar.gz
    then
      option DOWNLOAD gcc-$FILE-$GCC_VERSION-src.tar.gz
      option GCC_LANGUAGE_SET $PACKAGE ','
      case $PACKAGE in
        'c++') option GCC_BASE_OPTIONS \
           "$GCC_CXX_BASE_OPTIONS $GCC_CXX_USER_OPTIONS" ;;
         java) option GCC_BASE_OPTIONS \
           "$GCC_JAVA_BASE_OPTIONS $GCC_JAVA_USER_OPTIONS" ;;
      esac
    fi
  done ;;
esac
case $BUILD_COMPONENTS in *binutils*)
  test -n "$BINUTILS_VERSION" && \
    option DOWNLOAD binutils-$BINUTILS_VERSION-src.tar.gz
  option BINUTILS_BASE_OPTIONS "$BINUTILS_USER_OPTIONS" ;;
esac
case $BUILD_COMPONENTS in *mingw-runtime*)
  test -n "$RUNTIME_VERSION" && \
    option DOWNLOAD mingw-runtime-$RUNTIME_VERSION-src.tar.gz
  option RUNTIME_BASE_OPTIONS "$RUNTIME_USER_OPTIONS" ;;
esac
case $BUILD_COMPONENTS in *w32api*)
  test -n "$W32API_VERSION" && \
    option DOWNLOAD w32api-$W32API_VERSION-src.tar.gz
  option W32API_BASE_OPTIONS "$W32API_USER_OPTIONS" ;;
esac

. $script.detail > $script.log
. $script.detail

# $RCSfile: x86-mingw32-build.sh.batch,v $Revision: 1.1 $: end of file
